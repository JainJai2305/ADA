// recursive binary search
#include<stdio.h>
int func(int n,int arr[],int b,int ele)
{
	int num=ele ;
	int size=n ;
	int mid=b+size/2,mide=arr[mid] ;
	if(size<0)
	{
		return -1 ;
	}
	if(mide==ele)
	{
		return 1 ;#include<stdio.h>
int func(int n,int arr[],int b,int ele)
{
	int num=ele ;
	int size=n ;
	int mid=b+size/2,mide=arr[mid] ;
	if(size<0)
	{
		return -1 ;
	}
	if(mide==ele)
	{
		return 1 ;
	}
	if(mide<ele)
	{
		func( mid, arr,0, num)
	}
	if(mide>ele)
	{
		func( size-mid, arr,mid, num)
	}
}

int main()
{
	int size,item ;
	printf("enter the size \n") ;
	scanf("%d",&size) ;
	int arr[size] ;
	printf("enter the elements \n") ;
	for(int x=0;x<size;x++)
	{
		scanf("%d",arr[x]) ;
	}
	printf("enter the element\n") ;
	scanf("%d",&item) ;
	if(func(size,arr,0,item)==-1)
	{
		printf("element is not present") ;
	}
	else
	{
		printf("element is present") ;
	}
}


// recursuive linear search
#include<stdio.h> 
int recSearch(int arr[], int l, int r, int x) 
{ 
     if (r < l) 
        return -1; 
     if (arr[l] == x) 
        return l; 
     if (arr[r] == x) 
        return r; 
     return recSearch(arr, l+1, r-1, x); 
} 
  
int main() 
{ 
    int arr[] = {12, 34, 54, 2, 3}, i; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    int x = 3; 
    int index = recSearch(arr, 0, n-1, x); 
    if (index != -1) 
       printf("Element %d is present at index %d", x, index); 
    else
        printf("Element %d is not present", x); 
    return 0; 
} 
